{"version":3,"sources":["components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","handleSubmit","value","location","placeholder","type","onChange","handleChange","Result","console","log","className","locationList","map","x","key","id","country","weather","temp","src","icon","width","App","useState","setLocation","setLocationList","e","target","preventDefault","url","a","axios","get","data","visibility","fetchDailyData","then","idApi","locationApi","name","countryApi","sys","tempApi","parseInt","main","weatherApi","toLowerCase","imagesDisplay","bgImage","document","querySelector","classList","add","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0SAkBeA,MAhBf,SAAcC,GACV,OACI,0BAAMC,SAAUD,EAAME,cAClB,mDAGA,2BACEC,MAAOH,EAAMI,SACbC,YAAaL,EAAMI,SAAWJ,EAAMI,SAAW,YAC/CE,KAAK,OACLC,SAAUP,EAAMQ,iBCKfC,MAff,SAAgBT,GAEZ,OADAU,QAAQC,IAAIX,GAER,yBAAKY,UAAU,UACZZ,EAAMa,aAAaC,KAAI,SAACC,GAAD,OACtB,yBAAKC,IAAKD,EAAEE,GAAIL,UAAWG,EAAEZ,MAAQ,eAAiB,UAClD,yBAAKS,UAAU,SAASG,EAAEZ,MAA1B,KAAmCY,EAAEG,QAArC,KACA,yBAAKN,UAAU,WAAWG,EAAEI,SAC5B,yBAAKP,UAAU,QAAQG,EAAEK,KAAzB,QACA,yBAAKR,UAAU,QAAO,yBAAKA,UAAU,aAAaS,IAAKN,EAAEO,KAAMC,MAAM,QAJzE,UC+GGC,EA/GH,WAAM,IAAD,EAEiBC,mBAAS,IAF1B,mBAERrB,EAFQ,KAEEsB,EAFF,OAGyBD,mBAAS,CAC/C,CACER,GAAI,GACJd,MAAO,GACPe,QAAS,GACTE,KAAM,GACND,QAAS,GACTG,KAAM,MAVK,mBAGRT,EAHQ,KAGMc,EAHN,KAuGf,OACI,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAMJ,aA3FS,SAACoB,GAGpBF,EAAYE,EAAEC,OAAO1B,QAwFiBD,aArFpB,SAAC0B,GACnBlB,QAAQC,IAAIE,EAAaI,IAEF,KAApBJ,EAAaI,IACdP,QAAQC,IAAI,OAGdiB,EAAEE,iBAEF,IACMC,EAAG,4DAAwD3B,EAAxD,+BADM,qCAGK,uCAAG,4BAAA4B,EAAA,sEACFC,IAAMC,IAAIH,GADR,OACfI,EADe,OAErBzB,QAAQC,IAAIwB,EAAKA,KAAKC,YAFD,2CAAH,qDAKpBC,GAEAJ,IAAMC,IAAIH,GAAKO,MAAK,SAACH,GAKnB,IAAII,EAAQJ,EAAKA,KAAKlB,GAClBuB,EAAcL,EAAKA,KAAKM,KACxBC,EAAaP,EAAKA,KAAKQ,IAAIzB,QAC3B0B,EAAUC,SAASV,EAAKA,KAAKW,KAAK1B,MAClC2B,EAAaZ,EAAKA,KAAKhB,QAAQ,GAAG2B,KAAKE,cAK3CrB,EAAgB,CAEd,CACEV,GAAIsB,EACJpC,MAAOqC,EACPtB,QAASwB,EACTtB,KAAMwB,EACNzB,QAAS4B,EACTzB,KAZU,aAAayB,EAAW,eAiBtCE,EAAcF,MAIhB,IAAME,EAAgB,SAACF,GAKrB,IAOMG,EAAUC,SAASC,cAAc,QACvCF,EAAQtC,UAAY,MACpBsC,EAAQG,UAAUC,IAAIP,GAEtBrC,QAAQC,IAAI,YAIZD,QAAQC,IAAIE,IASda,EAAY,OAOR,kBAAC,EAAD,CAAQb,aAAcA,MCrGV0C,QACW,cAA7BC,OAAOpD,SAASqD,UAEe,UAA7BD,OAAOpD,SAASqD,UAEhBD,OAAOpD,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASW,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.6ac2d2df.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Form(props) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <h1>\n              Awesome Weather App\n            </h1>\n            <input\n              value={props.location}\n              placeholder={props.location ? props.location : 'Type here'}\n              type=\"text\"\n              onChange={props.handleChange}\n            />\n        </form>\n    )\n}\n\nexport default Form\n","import React from 'react'\n\nfunction Result(props) {\n    console.log(props)\n    return (\n        <div className=\"result\">\n          {props.locationList.map((x)=>(\n            <div key={x.id} className={x.value ? 'weather-info' : 'hidden'}>\n                <div className=\"place\">{x.value}, {x.country} </div> \n                <div className=\"weather\">{x.weather}</div>\n                <div className=\"temp\">{x.temp}Â°</div>\n                <div className=\"icon\"><img className=\"image-icon\" src={x.icon} width=\"60\" /></div> </div>\n          ))}\n        </div>\n    )\n}\n\nexport default Result\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './components/Form';\nimport Result from './components/Result';\n\n\nconst App = () =>{\n  \n  const [location, setLocation] = useState('');\n  const [locationList, setLocationList] = useState([\n    {\n      id: '',\n      value: '',\n      country: '',\n      temp: '',\n      weather: '',\n      icon: ''\n    }\n  ])\n\n  const handleChange = (e) => {\n    // console.log(e.target.value)\n    \n    setLocation(e.target.value)\n  }\n\n  const handleSubmit= (e) => {\n    console.log(locationList.id)\n\n    if(locationList.id === \"\") {\n      console.log('jhj')\n    }\n\n    e.preventDefault();\n    \n    const apikey = '241f8e06820f595de04bcf24188662ed';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${apikey}`;\n\n    const fetchDailyData = async() =>{\n      const data = await axios.get(url)\n      console.log(data.data.visibility);\n    }\n\n    fetchDailyData();\n\n    axios.get(url).then((data) => {\n      // console.log(data.status);\n      // console.log(!data.ok);\n     \n\n      let idApi = data.data.id;\n      let locationApi = data.data.name;\n      let countryApi = data.data.sys.country;\n      let tempApi = parseInt(data.data.main.temp);\n      let weatherApi = data.data.weather[0].main.toLowerCase();\n      let iconApi = '../images/'+weatherApi+'-icon.png';\n\n      // console.log(tempApi)\n\n      setLocationList([\n        // ...locationList,\n        {\n          id: idApi,\n          value: locationApi,\n          country: countryApi,\n          temp: tempApi,\n          weather: weatherApi,\n          icon: iconApi\n        }\n      ]);\n\n      \n      imagesDisplay(weatherApi);\n\n    })\n\n    const imagesDisplay = (weatherApi) => {\n      // document.body.className = \"\"\n      // document.body.classList.add(weatherApi);\n\n\n      let images={\n        'haze': 'show haze',\n        'Clouds':'show Clouds',\n        'Clear':'show Clear',\n        'Rain': 'show Rain'\n      }\n\n      const bgImage = document.querySelector('.App')\n      bgImage.className = \"App\"\n      bgImage.classList.add(weatherApi);\n\n      console.log('new func')\n\n      \n\n      console.log(locationList);\n\n\n\n      \n      \n    }\n\n\n    setLocation('');\n  }\n  \n  \n  return (\n      <div className='App'> \n        <Form handleChange={handleChange} handleSubmit={handleSubmit} />\n        <Result locationList={locationList} />\n      </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}